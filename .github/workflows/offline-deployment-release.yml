name: Offline Deployment Semantic Release

on:
  push:
    branches:
      - offline-deployment
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout offline-deployment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: offline-deployment

      - name: Fetch all tags (ensure tag visibility)
        run: |
          echo "=== [INFO] Fetching all tags from origin ==="
          git fetch --tags
          echo "=== [INFO] Tags available locally ==="
          git tag -l

      - name: Determine next semantic version and if release is needed
        id: version
        run: |
          echo "=== [INFO] Determining last tag and commit range ==="
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "[INFO] Last tag found: $LAST_TAG"
            MAJOR=$(echo $LAST_TAG | cut -d. -f1 | tr -d 'v')
            MINOR=$(echo $LAST_TAG | cut -d. -f2)
            PATCH=$(echo $LAST_TAG | cut -d. -f3)
            RANGE="$LAST_TAG..HEAD"
          else
            echo "[INFO] No previous tag found. Starting at v1.0.0"
            MAJOR=1; MINOR=0; PATCH=0
            RANGE=""
          fi

          echo "=== [INFO] Scanning commits for user-facing changes ==="
          COMMITS=""
          for SHA in $(git log --pretty=format:"%H" $RANGE); do
            MSG=$(git log -1 --pretty=format:"%s" $SHA)
            FILES=$(git diff-tree --no-commit-id --name-only -r $SHA)
            echo "[AUDIT] Commit $SHA: $MSG"
            if [[ "$MSG" =~ ^(ci|chore|docs): ]]; then
              echo "[AUDIT] -> Ignored: infra/ci/docs commit"
              continue
            fi
            ONLY_INFRA=true
            for FILE in $FILES; do
              if [[ ! "$FILE" =~ \.ya?ml$ && ! "$FILE" =~ \.md$ ]]; then
                ONLY_INFRA=false
                break
              fi
            done
            if $ONLY_INFRA; then
              echo "[AUDIT] -> Ignored: only .yml/.yaml/.md files changed"
              continue
            fi
            echo "[AUDIT] -> Included: user-facing change"
            COMMITS="$COMMITS $SHA"
          done

          if [ -z "$COMMITS" ]; then
            echo "[INFO] No new user-facing commits since last tag. Skipping release."
            echo "skip_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "=== [INFO] Determining version bump type ==="
          BUMP="patch"
          for SHA in $COMMITS; do
            MSG=$(git log -1 --pretty=format:"%s" $SHA)
            if echo "$MSG" | grep -q -E 'BREAKING CHANGE|^feat!:'; then
              echo "[AUDIT] Major bump triggered by commit: $SHA ($MSG)"
              BUMP="major"
              break
            elif echo "$MSG" | grep -q -E '^feat:'; then
              if [ "$BUMP" != "major" ]; then
                echo "[AUDIT] Minor bump triggered by commit: $SHA ($MSG)"
                BUMP="minor"
              fi
            elif echo "$MSG" | grep -q -E '^fix:' && [ "$BUMP" = "patch" ]; then
              echo "[AUDIT] Patch bump triggered by commit: $SHA ($MSG)"
              BUMP="patch"
            fi
          done

          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
            echo "[INFO] Version bump: major -> v$MAJOR.$MINOR.$PATCH"
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
            echo "[INFO] Version bump: minor -> v$MAJOR.$MINOR.$PATCH"
          else
            PATCH=$((PATCH + 1))
            echo "[INFO] Version bump: patch -> v$MAJOR.$MINOR.$PATCH"
          fi
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "[INFO] New tag to be created: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "skip_release=false" >> $GITHUB_OUTPUT

      - name: Prepare clean dist directory for archiving
        if: steps.version.outputs.skip_release == 'false'
        run: |
          echo "=== [INFO] Preparing clean dist directory for archiving ==="
          rm -rf dist
          mkdir dist
          rsync -a --exclude='.git' --exclude='node_modules' --exclude='dist' ./ dist/
          echo "[INFO] Files to be archived:"
          find dist/ -type f

      - name: Create offline build archives (ZIP and TAR.GZ) with version tag
        if: steps.version.outputs.skip_release == 'false'
        run: |
          cd dist
          BUILD_NAME="elecalculate-offline-${{ steps.version.outputs.new_tag }}"
          echo "[INFO] Creating ZIP archive: $BUILD_NAME.zip"
          zip -r "../$BUILD_NAME.zip" .
          echo "[INFO] Creating TAR.GZ archive: $BUILD_NAME.tar.gz"
          tar -czf "../$BUILD_NAME.tar.gz" .
          cd ..
          echo "ZIP_NAME=$BUILD_NAME.zip" >> $GITHUB_ENV
          echo "TAR_NAME=$BUILD_NAME.tar.gz" >> $GITHUB_ENV

      - name: Gather and format release notes
        if: steps.version.outputs.skip_release == 'false'
        id: notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            RANGE="$LAST_TAG..HEAD"
          else
            RANGE=""
          fi

          FEATURES=""
          FIXES=""
          OTHERS=""
          for SHA in $(git log --pretty=format:"%H" $RANGE); do
            MSG=$(git log -1 --pretty=format:"%s" $SHA)
            FILES=$(git diff-tree --no-commit-id --name-only -r $SHA)
            if [[ "$MSG" =~ ^(ci|chore|docs): ]]; then
              echo "[AUDIT] Release notes: Ignored infra/ci/docs commit $SHA ($MSG)"
              continue
            fi
            ONLY_INFRA=true
            for FILE in $FILES; do
              if [[ ! "$FILE" =~ \.ya?ml$ && ! "$FILE" =~ \.md$ ]]; then
                ONLY_INFRA=false
                break
              fi
            done
            if $ONLY_INFRA; then
              echo "[AUDIT] Release notes: Ignored .yml/.md-only commit $SHA ($MSG)"
              continue
            fi
            if [[ "$MSG" =~ ^feat: ]]; then
              FEATURES+=$'\n'"* ${MSG#feat: }"
            elif [[ "$MSG" =~ ^fix: ]]; then
              FIXES+=$'\n'"* ${MSG#fix: }"
            else
              OTHERS+=$'\n'"* $MSG"
            fi
          done

          {
            echo "**Build date:** $(date -u +"%Y-%m-%d %H:%M UTC")"
            echo "**Branch:** offline-deployment"
            echo "**Assets:** ${{ env.ZIP_NAME }}, ${{ env.TAR_NAME }}"
            echo
            if [ -n "$FEATURES" ]; then
              echo "### Features"
              echo "$FEATURES"
              echo
            fi
            if [ -n "$FIXES" ]; then
              echo "### Fixes"
              echo "$FIXES"
              echo
            fi
            if [ -n "$OTHERS" ]; then
              echo "### Other changes"
              echo "$OTHERS"
              echo
            fi
          } > release-notes.md

          echo >> release-notes.md
          {
            echo "release_notes<<EOF"
            cat release-notes.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create and push new tag (if not exists)
        if: steps.version.outputs.skip_release == 'false'
        run: |
          echo "=== [INFO] Checking if tag ${{ steps.version.outputs.new_tag }} exists ==="
          if git rev-parse "${{ steps.version.outputs.new_tag }}" >/dev/null 2>&1; then
            echo "[INFO] Tag ${{ steps.version.outputs.new_tag }} already exists. Skipping tag creation."
          else
            echo "[INFO] Creating and pushing tag ${{ steps.version.outputs.new_tag }}"
            git tag ${{ steps.version.outputs.new_tag }}
            git push origin ${{ steps.version.outputs.new_tag }}
          fi

      - name: Create GitHub Release and upload artifacts
        if: steps.version.outputs.skip_release == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          target_commitish: offline-deployment
          name: Release ${{ steps.version.outputs.new_tag }}
          body: ${{ steps.notes.outputs.release_notes }}
          files: |
            ${{ env.ZIP_NAME }}
            ${{ env.TAR_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

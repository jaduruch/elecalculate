name: Offline Deployment Semantic Release

on:
  push:
    branches:
      - offline-deployment

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout offline-deployment
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: offline-deployment

      - name: Prepare clean dist directory for archiving
        run: |
          rm -rf dist
          mkdir dist
          rsync -a --exclude='.git' --exclude='node_modules' --exclude='dist' ./ dist/

      - name: Create offline build archives (ZIP and TAR.GZ)
        run: |
          cd dist
          BUILD_NAME="elecalculate-offline-$(date +%Y%m%d-%H%M%S)"
          zip -r "../$BUILD_NAME.zip" .
          tar -czf "../$BUILD_NAME.tar.gz" .
          cd ..
          echo "ZIP_NAME=$BUILD_NAME.zip" >> $GITHUB_ENV
          echo "TAR_NAME=$BUILD_NAME.tar.gz" >> $GITHUB_ENV

      - name: Determine next semantic version
        id: version
        run: |
          # Get latest tag (vX.Y.Z), default to v1.0.0 if none
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          if [ "$LAST_TAG" = "v1.0.0" ] && [ -z "$(git tag)" ]; then
            MAJOR=1; MINOR=0; PATCH=0
          else
            MAJOR=$(echo $LAST_TAG | cut -d. -f1 | tr -d 'v')
            MINOR=$(echo $LAST_TAG | cut -d. -f2)
            PATCH=$(echo $LAST_TAG | cut -d. -f3)
          fi

          # Get commit messages since last tag
          if [ "$LAST_TAG" = "v1.0.0" ] && [ -z "$(git tag)" ]; then
            RANGE=""
          else
            RANGE="$LAST_TAG..HEAD"
          fi
          COMMITS=$(git log --pretty=format:"%s" $RANGE)

          # Default: patch bump
          BUMP="patch"
          if echo "$COMMITS" | grep -q -E 'BREAKING CHANGE|^feat!:'; then
            BUMP="major"
          elif echo "$COMMITS" | grep -q -E '^feat:'; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -q -E '^fix:'; then
            BUMP="patch"
          fi

          # Calculate next version
          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1)); PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Gather release notes from commits since last tag
        id: notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            RANGE=""
          else
            RANGE="$LAST_TAG..HEAD"
          fi
          git log --pretty=format:"* %s" $RANGE > release-notes.md
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}

      - name: Create GitHub Release and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          target_commitish: offline-deployment
          name: Release ${{ steps.version.outputs.new_tag }}
          body: ${{ steps.notes.outputs.release_notes }}
          files: |
            ${{ env.ZIP_NAME }}
            ${{ env.TAR_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
